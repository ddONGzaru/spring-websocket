# LOG LEVEL : FATAL > ERROR > WARN > INFO > DEBUG

###################################################
#     Root Logger Configuration  	 		      #
###################################################
#log4j를 설정하는 상세 정보 출력여부 (true/false)
log4j.debug=false

#sdp7에서는 rootLogger는 사용하지 않고 sdp appender를 사용하므로 주석 처리.
#log4j.rootLogger=ERROR, console, sdp

###################################################
#     sdp FILE Logger Configuration               #
###################################################
log4j.category.sdp=INFO, sdp, console
log4j.additivity.sdp=false
log4j.appender.sdp=org.apache.log4j.DailyRollingFileAppender
log4j.appender.sdp.File=C:/ePapyrus/log/pdf-gateway-7.log
log4j.appender.sdp.Encoding=UTF-8
log4j.appender.sdp.Append=true
log4j.appender.sdp.DatePattern='.'yyyy-MM-dd
log4j.appender.sdp.layout=org.apache.log4j.PatternLayout
log4j.appender.sdp.layout.ConversionPattern=[%d{ISO8601}] [%-21t] %-5p %m%n
log4j.appender.sdp.exclude.method.log.Display=false

###################################################
#     console Logger Configuration                #
###################################################
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.additivity.console=false
log4j.appender.console.Encoding=UTF-8
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%d{ISO8601}][%-21t] %-5p %m%n

###################################################
#     spring Logger Configuration                 #
###################################################
log4j.logger.org.springframework=INFO, console, sdp
log4j.additivity.org.springframework=false

###################################################
#     DWR Logger Configuration                    #
###################################################
log4j.logger.org.directwebremoting = ERROR, console, sdp
log4j.additivity.org.directwebremoting=false

###################################################
#     ehcache Logger Configuration                #
###################################################
log4j.category.com.googlecode.ehcache.annotations=ERROR, console, sdp
log4j.additivity.com.googlecode.ehcache.annotations=false

###################################################
#     log4jdbc-remix Logger Configuration         #
###################################################
#sql query를 log에 출력
log4j.logger.jdbc.sqlonly=debug, console, sdp
log4j.additivity.jdbc.sqlonly=false

#sql 결과를 log에 출력
log4j.logger.jdbc.resultsettable=ERROR, console, sdp
log4j.additivity.jdbc.resultsettable=false


###################################################
#     DatePattern Format Configuration            #
###################################################

# '.'yyyy-MM			매월 1일에 로그파일 변경.
# '.'yyyy-ww			매주마다 로그파일 변경.
# '.'yyyy-MM-dd			매일 자정(0:00)에 로그파일 변경.
# '.'yyyy-MM-dd-a		매일 정오(12:00)과 자정(0:00)에 로그파일 변경.
# '.'yyyy-MM-dd-HH		매시간마다 로그파일 변경.	
# '.'yyyy-MM-dd-HH-mm   매분마다 로그파일 변경.	


###################################################
#     PatternLayout Format Configuration          #
###################################################

# 01. %p  debug, info, warn, error, fatal 등의 priority 가 출력.
# 02. %m  로그내용(코드상에 설정한 내용)이 출력. (예) logger.info("log"); 라하면 log가 로그내용이 됨.
# 03. %d  로깅 이벤트가 일어난 시간을 기록. 
#         포맷은 %d{HH:mm:ss, SSS}, %d{yyyy MMM dd HH:mm:ss, SSS} 같이 사용하고 SimpleDateFormat에 따른 포매팅이면 좋음.
# 04. %t  로깅 이벤트가 발생한 스레드명을 출력.
# 05. %%  '%' 문자를 그대로 출력하기 위해 사용.
# 06. %n  개행문자 출력. \r\n 또는 \n。
# 07. %c  카테고리의 표시. 카테고리가 a.b.c처럼 되어있고 %c{2}로 설정하면 b.c가 표시됨.
# 08. %C  클래스명의 표시. 예) 클래스의 구조가 org.apache.xyz.SomeClass라고 하면,  %C{2}는 xyz.SomeClass가 출력됨.
# 09. %F  로그 이벤트가 발생한 프로그램 파일명을 표시.
# 10. %l  로그 이벤트가 발생한 caller의 정보를 표시.
# 11. %L  로그 이벤트가 발생한 caller의 라인 넘버를 표시.
# 12. %M  로그 이벤트가 발생한 메소드명을 표시.
# 13. %r  어플리케이션의 개시부터 로그 이벤트가 발생한 시점까지의 시간 (milliseconds)。
# 14. %x  로그 이벤트가 발생한 스레드와 관련된 NDC(nested diagnostic context)를 표시.
# 15. %X  로그 이벤트가 발생한 스레드와 관련된 MDC(mapped diagnostic context)를 표시.


###################################################
#     log4j.appender.pdf-gateway.Threshold        #
###################################################
#어펜더에 설정한 Threshold는 로거에 설정한 로깅레벨에서 Threshold보다 레벨이 낮은 것은 걸러내서 출력하지 않도록 하는 역할을 한다. 
#따라서 로거에서 설정한 로깅 레벨이 Threshold보다 높다면 Threshold는 걸러낼 것이 없기 때문에 의미가 없다.
